my_breakfast,my_lunch,
my_dinner <- "Steak, Mashed Potatoes, Orange Juice"
)
meals
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$my_dinner
dinner
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(
my_breakfast,my_lunch,
(my_dinner <- "Steak, Mashed Potatoes, Orange Juice")
)
meals
# Use dollar notation to extract your `dinner` element from your list
# and save it in a vector called 'dinner'
dinner <- meals$my_dinner
dinner
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%==0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, even%%==0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, even%%=0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, 2%%=0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, 2%%==0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, even%%2)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even, even%%2==0)
# Using the `all()` function and `%%` (modulo) operator, confirm that all of the
# numbers in your `even` vector are even
all(even%%2==0)
# Add a "dinner" element to your `meals` list that has what you plan to eat
# for dinner
meals <- list(
my_breakfast,my_lunch,
my_dinner <- "Steak, Mashed Potatoes, Orange Juice"
)
dinner
meals
# Create a vector `phone_numbers` that contains the numbers 8, 6, 7, 5, 3, 0, 9
phone_numbers <- c(8, 6, 7, 5, 3, 0, 9)
# Create a vector `prefix` that has the first three elements of `phone_numbers`
prefix <- c(phone_numbers[1:3])
# Create a vector `small` that has the values of `phone_numbers` that are
# less than or equal to 5
small <- c(phone_numbers <= 5)
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- c(phone_numbers >= 5)
# Create a vector `large` that has the values of `phone_numbers` that are
# strictly greater than 5
large <- c(phone_numbers > 5)
# Replace the values in `phone_numbers` that are larger than 5 with the number 5
phone_numbers[large] <- 5
# Replace every odd-numbered value in `phone_numbers` with the number 0
all(phone_numbers%%2)
# Replace every odd-numbered value in `phone_numbers` with the number 0
all(phone_numbers%%2==1)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%2==1)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
all(phone_numbers%%2!==0)
# Replace every odd-numbered value in `phone_numbers` with the number 0
all(phone_numbers%%2!=0)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%2!=0)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
all(phone_numbers%%2)
# Replace every odd-numbered value in `phone_numbers` with the number 0
all(phone_numbers%%2==0)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%2==0)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%2!=0)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
odd <- all(phone_numbers%%2!=0)
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%==1)]  <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%==1)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%=1)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[all(phone_numbers%%==1)] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%==1] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%==1] <- 0
# Replace every odd-numbered value in `phone_numbers` with the number 0
phone_numbers[phone_numbers%%2==1] <- 0
# Your script for Part 1 goes here (and delete this comment!)
my_age <- 20
my_name <- "Tony Choi"
install.packages("styler")
styler:::set_style_transformers()
styler:::set_style_transformers()
styler:::style_active_pkg()
styler:::style_selection()
styler:::set_style_transformers()
styler:::style_selection()
#
make_introduction <- function(name, age){
paste("Hello, my name is", my_name, "and I'm", my_age, "years old.")
}
make_introduction
#
make_introduction <- function(name, age){
paste("Hello, my name is", name, "and I'm", age, "years old.")
}
make_introduction
make_introduction (my_name, my_age)
}
make_introduction (my_name, my_age)
return greeting
greeting <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return greeting
}
#Creates a greeting introduction. Takes in name and age, and returns a greeting.
make_introduction <- function(name, age){
greeting <- paste("Hello, my name is", name, "and I'm", age, "years old.")
}
return greeting
#Creates a greeting introduction. Takes in name and age, and returns a greeting.
make_introduction <- function(name, age){
greeting <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return greeting
}
#Creates a greeting introduction. Takes in name and age, and returns a greeting.
make_introduction <- function(name, age){
greeting <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(greeting)
}
make_introduction()
make_introduction(my_name, my_age)
my_intro <- make_introduction(my_name, my_age)
paste (my_intro)
print (my_intro)
?>sub
?sub
casual_intro <- sub(my_intro, "Hello my name is", "Hey, I'm")
casual_intro
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
casual_intro
casual_intro <- sub("Hello my name is", "Hey, I'm", my_intro)
casual_intro
casual_intro <- gsub("Hello my name is", "Hey, I'm", my_intro)
casual_intro <- gsub("Hello my name is", "Hey, I'm", my_intro)
casual_intro
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Tony Choi"
#Creates a greeting introduction. Takes in name and age, and returns a greeting.
make_introduction <- function(name, age){
greeting <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(greeting)
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- gsub("Hello my name is", "Hey, I'm", my_intro)
casual_intro
#################
#### PART 2 #####
#################
# Your script for Part 2 goes here (and delete this comment!)
#################
#### PART 3 #####
#################
# Your script for Part 3 goes here (and delete this comment!)
#################
#### PART 4 #####
#################
# Your script for Part 4 goes here (and delete this comment!)
casual_intro
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
install.packages("stringr")
capital_intro <- str_to_title(my_intro)
?str_to_title
styler:::style_active_pkg()
styler:::style_active_pkg()
install.packages("install.packages("stringr")")
install.packages("stringr")
?str_to_title
?str_to_upper
str_to_upper(my_intro)
str_to_title(dog)
devtools::install_github("hadley/stringr")
install_github("hadley/stringr")
install.packages("stringr")
str_to_upper
library(stringr)
library(stringi)
library(styler)
str_to_upper
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(e, my_intro)
intro_e_count <- str_count(my_intro, e)
intro_e_count <- str_count(my_intro, "e")
intro_e_count <- str_count("e", my_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
books <- c("The Cat in the Hat", "Harry Potter", "Lord of the Rings", "Goosebumps", "Charlie and the Chocolate Factory", "The Bible")
print(books)
top_three_books <- books[1:3]
print top_three_books
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
book_reviews
print(book_reviews)
remove_book <- function(index){
books[-index]
return
}
remove_book(2)
book_removed <- books[-index]
remove_book <- function(index){
book_removed <- books[-index]
return book_removed
}
return book_removed
return(book_removed)
books[-index]
books[-"index"]
books[-x]
return
remove_book <- function(x){
book[-x]
return
}
remove_book <- function(x){
book[-x]
return
}
remove_book(2)
books[-x]
remove_book <- function(x){
books[-x]
return
}
remove_book(2)
remove_book <- function(book_titles, x){
books[-x]
return
}
remove_book <- function(book_titles, x){
book_titles[-x]
return
}
return(book_titles)
remove_book <- function(book_titles, x){
book_titles[-x]
return(book_titles)
}
remove_book(2)
remove_book(books, 2)
book_removed <- book_titles[-x]
remove_book <- function(book_titles, x){
book_removed <- book_titles[-x]
return(book_titles)
}
remove_book(books, 2)
remove_book <- function(book_titles, x){
book_removed <- book_titles[-x]
return(book_removed)
}
remove_book(books, 2)
books_without_five <- remove_book(books, 5)
books_without_five
print(books_without_five)
long_titles <- books > nchar(15)
books[long_titles]
long_titles <- books < nchar(15)
books[long_titles]
long_titles <- books > nchar(15)
books[long_titles]
?nchar
nchar(books)
long_titles <- nchar(books) < 15
long_titles
long_titles <- nchar(books) > 15
long_titles
long_titles <- books[nchar(books) > 15]
long_titles
print(long_titles)
numbers <- 1:201
squared_numbers <- numbers**2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_mean)
squared_median <- median(square_numners)
squared_median <- median(square_numbers)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- numbers[sqrt(numbers)]
perfect_squares <- numbers[sqrt(x)=round(x)]
perfect_squares <- numbers[sqrt(x)==round(x)]
perfect_squares <- numbers[sqrt(numbers)==round(numbers)]
perfect_squares
perfect_squares <- numbers[sqrt(n)==round(n)]
perfect_squares <- sqrt(numbers)
nums_squared <- sqrt(numbers)
perfect_squares <- numbers[sqrt(numbers) == round(numbers)]
perfect_squares <- numbers[sqrt(numbers) == round(numbers)]
print(perfect_squares)
perfect_squares <- numbers[sqrt(numbers) = round(numbers)]
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
?as.Date
spring_break <- Date(March 21, 2020)
spring_break <- as.Date(March 21, 2020)
spring_break <- as.Date(3 21, 2020)
spring_break <- as.Date("03-21-2020")
spring_break <- as.Date(03-21-2020)
spring_break <- as.Date(2020-03-21)
spring_break <- as.Date("2020-03-21")
class(spring_break
)
class(spring_break)
today <- as.Date("2020-01-20")
days_to_break <- spring_break - today
print(days_to_break)
today <- as.Date(Sys.date)
today <- as.Date(Sys.date)
today <- as.Date(Sys.Date)
today <- as.Date(Sys.Date)
today <- as.Date("2020-01-20")
print(days_to_break)
?substr
return(as.Date)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string[5:10])
paste(year, month_and_day)
as.Date(date_as_string)
return(as.Date)
}
change_year(2020-01-20, 2022)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5)
paste(year, month_and_day)
as.Date(date_as_string)
return(as.Date)
}
change_year(2020-01-20, 2022)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
paste(year, month_and_day)
as.Date(date_as_string)
return(as.Date)
}
change_year(2020-01-20, 2022)
change_year("2020-01-20", "2022")
change_year(today, "2022")
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
paste(year, month_and_day)
new_date <- as.Date(date_as_string)
return(new_date)
}
change_year(today, "2022")
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
paste(year, month_and_day)
new_date <- as.Date(date_as_string)
return(new_date)
}
change_year(today, "2022")
change_year(today, 2022)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 1, 5)
paste(year, month_and_day)
new_date <- as.Date(date_as_string)
return(new_date)
}
change_year(today, 2022)
return(new_date)
change_year(today, 2022)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
paste(year, month_and_day)
new_date <- as.Date(date_as_string)
return(new_date)
}
change_year(today, 2022)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date_type <- paste(year, month_and_day)
new_date <- as.Date(date_as_string)
return(new_date)
}
change_year(today, 2022)
new_date_typex
new_date_type
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date_type <- paste(year, month_and_day)
new_date <- as.Date(date_as_string)
return(new_date)
}
new_date_type
change_year(today, 2022)
change_year('2020-01-20', 2022)
change_year("2020-01-20", 2022)
change_year(spring_break, 2022)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date_type <- paste(year, month_and_day)
new_date <- as.Date(new_date_type)
return(new_date)
}
change_year(spring_break, 2022)
today[5:10]
test <- as.character(today)
test
test_1 <- substr(test, 5, 10)
test_1
paste(2020, test_1)
paste(2020 test_1)
paste(2020+test_1)
paste("2020",test_1)
paste0("2020",test_1)
#
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date_type <- paste0(year, month_and_day)
new_date <- as.Date(new_date_type)
return(new_date)
}
change_year(spring_break, 2022)
change_year(spring_break, 2022)
change_year(spring_break, 2025)
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#
date_has_passed <- function(date){
Sys.Date - date < 0
}
date_has_passed(spring_break)
#
date_has_passed <- function(Date){
Sys.Date - Date < 0
}
date_has_passed(spring_break)
date_has_passed(spring_break)
date_has_passed(today)
Sys.Date
?Sys.Date
Sys.Date
Sys.Date
Sys.time
Sys.Date()
Sys.Date(1)
Sys.Date(today)
Sys.timezone()
Sys.Date
Sys.Date()
#
date_has_passed <- function(date){
Sys.Date() - date < 0
}
date_has_passed(spring_break)
date_has_passed(spring_break)
#
date_has_passed <- function(date){
Sys.Date() - date > 0
}
date_has_passed(spring_break)
today <- Sys.Date()
date_has_passed(as.Date(2020-01-23))
#
date_has_passed <- function(date){
Sys.Date() - date > 0
}
date_has_passed(as.Date(2020-01-23))
date_has_passed(as.Date("2020-01-23"))
print(date_has_passed(as.Date("2020-01-23")))
