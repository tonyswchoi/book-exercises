return(birthday_this_year)
}
return(birthday_this_year)
return(birthday_this_year)}
return(birthday_this_year)}
return(birthday_this_year)
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday,2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday,2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday,2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
#################
#### PART 1 #####
#################
my_age <- 20
my_name <- "Tony Choi"
#Creates a greeting introduction. Takes in name and age, and returns a greeting.
make_introduction <- function(name, age){
greeting <- paste("Hello, my name is", name, "and I'm", age, "years old.")
return(greeting)
}
my_intro <- make_introduction(my_name, my_age)
print(my_intro)
casual_intro <- sub("Hello, my name is", "Hey, I'm", my_intro)
print(casual_intro)
capital_intro <- str_to_title(my_intro)
print(capital_intro)
intro_e_count <- str_count(my_intro, "e")
print(intro_e_count)
#################
#### PART 2 #####
#################
books <- c("The Cat in the Hat", "Harry Potter", "Lord of the Rings", "Goosebumps", "Charlie and the Chocolate Factory", "The Bible")
print(books)
top_three_books <- books[1:3]
print(top_three_books)
book_reviews <- paste(books, "is a great read!")
print(book_reviews)
#Removes a book title from a vector. Takes in two arguments, the vector and the index that is to be removed.
remove_book <- function(book_titles, x){
book_removed <- book_titles[-x]
return(book_removed)
}
books_without_five <- remove_book(books, 5)
print(books_without_five)
long_titles <- books[nchar(books) > 15]
print(long_titles)
#################
#### PART 3 #####
#################
numbers <- 1:201
squared_numbers <- numbers**2
squared_mean <- mean(squared_numbers)
print(squared_mean)
squared_median <- median(squared_numbers)
print(squared_median)
perfect_squares <- numbers[sqrt(numbers) == round(sqrt(numbers))]
print(perfect_squares)
#################
#### PART 4 #####
#################
spring_break <- as.Date("2020-03-21")
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
#Changes only the year of a given date. Requires two inputs, "date" and "year".
change_year <- function(date, year){
date_as_string <- as.character(date)
month_and_day <- substr(date_as_string, 5, 10)
new_date_type <- paste0(year, month_and_day)
new_date <- as.Date(new_date_type)
return(new_date)
}
spring_break_2025 <- change_year(spring_break, 2025)
print(spring_break_2025)
class(spring_break_2025)
#Determines whether the current date has passed the input date. Requires one input "date" which is the desired date.
date_has_passed <- function(date){
Sys.Date() - date > 0
}
date_has_passed(as.Date("2020-01-23"))
print(date_has_passed(as.Date("2020-01-23")))
#
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday,2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday,2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
#
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday,2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
birthday_this_year <- change_year(birthday,2020)
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
return(birthday_this_year)
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday(today)
get_next_birthday(today)
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if (birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if (birthday_this_year_passed = TRUE){
return(change_year(birthday, 2021))}
else{
return(birthday_this_year)}
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if (birthday_this_year_passed = TRUE){
print(change_year(birthday, 2021))}
else{
print(birthday_this_year)}
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE){
return(change_year(birthday, 2021))}
else{
return(birthday_this_year)}
}
get_next_birthday <- function(birthday) {
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if (birthday_this_year_passed = TRUE) {
return(change_year(birthday, 2021))}
else {
return(birthday_this_year)}
}
get_next_birthday <- function(birthday) {
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if (birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday) {
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed = TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed == TRUE)
return(change_year(birthday, 2021))
else
return(birthday_this_year)
}
}
get_next_birthday <- function(birthday){
birthday_this_year <- change_year(birthday, 2020)
birthday_this_year_passed <- date_has_passed(birthday_this_year)
if(birthday_this_year_passed == TRUE) {
return(change_year(birthday, 2021))}
else {
return(birthday_this_year)}
}
get_next_birthday(today)
get_next_birthday(as.Date(2020-01-01))
birthdays <- list(
Dad = as.Date(1963-11-05),
Mom = as.Date(1967-06-03),
Eric = as.Date(1991-12-30),
Denny = as.Date(1995-10-12),
Tony = as.Date(1999-03-27),
Justin = as.Date(2000-01-05)
)
birthdays <- list(
Dad = as.Date(1963-11-05, origin = 1970-01-01),
Mom = as.Date(1967-06-03),
Eric = as.Date(1991-12-30),
Denny = as.Date(1995-10-12),
Tony = as.Date(1999-03-27),
Justin = as.Date(2000-01-05)
)
print(today)
birthdays <- list(
Dad = as.Date(1963-11-05, origin = "1970-01-01"),
Mom = as.Date(1967-06-03),
Eric = as.Date(1991-12-30),
Denny = as.Date(1995-10-12),
Tony = as.Date(1999-03-27),
Justin = as.Date(2000-01-05)
)
as.Date(origin = 1970-01-01)
as.Date(origin = "1970-01-01")
?as.Date
birthdays <- list(
Dad = as.Date(1963-11-05, origin = "1970-01-01"),
Mom = as.Date(1967-06-03, origin = "1970-01-01"),
Eric = as.Date(1991-12-30, origin = "1970-01-01"),
Denny = as.Date(1995-10-12, origin = "1970-01-01"),
Tony = as.Date(1999-03-27, origin = "1970-01-01"),
Justin = as.Date(2000-01-05, origin = "1970-01-01")
)
print(birthdays)
scale_x_date
birthdays <- list(
Dad = as.Date(1963-11-05),
Mom = as.Date(1967-06-03),
Eric = as.Date(1991-12-30),
Denny = as.Date(1995-10-12),
Tony = as.Date(1999-03-27),
Justin = as.Date(2000-01-05)
)
birthdays <- list(
Dad = as.Date("1963-11-05"),
Mom = as.Date("1967-06-03"),
Eric = as.Date("1991-12-30"),
Denny = as.Date("1995-10-12"),
Tony = as.Date("1999-03-27"),
Justin = as.Date("2000-01-05")
)
print(birthdays)
get_next_birthday(birthdays$Tony)
get_next_birthday(birthdays$Justin)
get_next_birthday(birthdays$Tony)
?lapply
lapply(get_next_birthday, birthdays)
lapply(birthdays, get_next_birthday)
next_birthdays <- lapply(birthdays, get_next_birthday)
print(next_birthdays)
library(tidyverse)
install.packages("styler")
library(styler)
library("styler")
install.packages(lintr)
install.packages("lintr")
library("lintr")
linter
lint("assignment.R")
lint(assignment.R)
lint("assignment.R")
books <- c("The Cat in the Hat",
"Harry Potter",
"Lord of the Rings",
"Goosebumps",
"Charlie and the Chocolate Factory",
"The Bible")
lint("assignment.R")
lint("assignment.R")
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
library("stringr")
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
install.packages("lintr")
lint("assignment.R")
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
lint("assignment.R")
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
source('~/Desktop/Projects/a2-core-skills-tonyswchoi/assignment.R', echo=TRUE)
lint("assignment.R")
sharks <- c("Hammerhead", "Great White", "Thresher")
updated_sharks <- c(Sharks, "Goblin")
updated_sharks <- c(sharks, "Goblin")
print(updated_sharks)
earthquakes <- c(6.8, 5.3, 5.0, 7.3, 7.1, 6.3, 5.5)
earthquakes[ > 6.5]
large_earthquakes  <- earthquakes > 6.5
earthquakes[large_earthquakes]
large_earthquakes <- earthquakes > 6.5
earthquakes[large_earthquakes]
endangered <- c("Blue Whale", "Bluefin Tuna", "Galapago Penguin", "Florida Manatee", "Hawksbill Turtle", "Sea Otter")
filter <- c(TRUE FALSE FALSE TRUE FALSE, TRUE)
filter <- c(TRUE, FALSE, FALSE, TRUE, FALSE, TRUE)
print(endangered[filter])
shark_length <- list(hammerhead = 19.7,
great_white = 20.0,
thresher = 20.0,
goblin = 12.6)
shark_length[-4]
shark_length[4]
is.list(shark_length)
shark_length[[4]]
is.list(shark_length)
is.list(shark_length)
shark_length[[4]]
last_shark <- shark_length[[4]]
is.list(last_shark)
lab_grades <- list(hwk_scores = 5:10,
student_year = c(1, 4, 4, 2, 3, 2),
lab = "LL")
lab_grades[[is_participant]] <- "Yes"
lab_grades$is_participant <- "Yes"
print(lab_grades)
lab_grades[["is_participant""]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
lab_grades[["is_participant""]] <- "Yes"
# ============================
# Exercise 3. Bill Calculator
# ============================
#
# Scenario - suppose you went to tea shop today and you bought a cup of tea and 2 scones.
# There is a promotion today where if you buy a cup of tea and 2 scones you get 10% off your purchase.
# Sales tax in WA is 6.5%
tea <- 3.50
scone <- 3.00
discount <- 0.10
sales_tax <- 0.065
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + sales_tax
# Expected result
# total_after_tax
# 9.11
#
# END #
lab_grades[["is_participant""]] <- "Yes"
lab_grades[["is_participant"]] <- "Yes"
View(lab_grades)
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) + discount
total_with_discount
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) - (1 - discount)
total_with_discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (1 + sales_tax)
total_after_tax
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount * (sales_tax)
total_after_tax
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + (total_with_discount * sales_tax)
total_after_tax
# Calculate the total by summing all items purchased and apply the discount
total_with_discount <- (tea + 2*scone) * (1 - discount)
total_with_discount
# Now calculate your total after the 10% discount by multiplying your total by discount
total_after_tax <- total_with_discount + (total_with_discount * sales_tax)
total_after_tax
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employee", 1:100)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <-
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <-
?runif
salaries_2017 <-
?runif
salaries_2017 <-
?runif
salaries_2017 <-
?runif
?runif
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, -5000, 10000)
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salaries_2017 <- runif(100, 40000, 50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
adjustments <- runif(100, -5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(Employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, adjustments, stringsAsFactors = FALSE)
print(salaries)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 +salaries$adjustments
view(salaries)
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salaries$adjustments > 0
View(salaries)
# What was the 2018 salary of Employee 57
salaries[salaries$employees == "Employee 57", "salaries_2018"]
# How many employees got a raise?
nrow(salaries[salaries$got_raise == T, ])
# What was the dollar value of the highest raise?
biggest_raise <- max(salaries$adjustments)
salaries[ salaries$adjustments == max()]
salaries[ salaries$adjustments == max(biggest_rasise)]
salaries[ salaries$adjustments == max(biggest_raise)]
salaries[ salaries$adjustments == max(biggest_raise),]
salaries[ salaries$adjustments == biggest_raise,]
salaries[ salaries$adjustments == biggest_raise, "adjustments"]
# What was the "name" of the employee who received the highest raise?
salaries[ salaries$adjustments == biggest_raise, "employees"]
# For people who did not get a raise, how much money did they lose on average?
salaries[salaries$got_raise == F, ]
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == F, ]
mean(paycut$adjustments)
# For people who did not get a raise, how much money did they lose on average?
paycut <- salaries[salaries$got_raise == F, "adjustments"]
mean(paycut)
getwd()
setwd("~/Desktop/Projects/book-exercises/chapter-10-exercises/exercise-2")
